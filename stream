#!/usr/bin/env node

'use strict';

const express = require("express");
const fs = require("fs");
const path = require("path");
const app = express();
const PORT = 6429;
var os = require('os');
var networkInterfaces = os.networkInterfaces();


app.set("views", path.join(__dirname, "public"));
app.set("view engine", "ejs");

path.basename(process.cwd());

function get_dir(dir)  {
  const Files = {};
  const files = fs.readdirSync(dir);

  files.forEach(file => {
    Files[file] = fs.existsSync(file) && fs.lstatSync(file).isDirectory();
  });

  return Files;
}

app.get('/', function(req, res) {
  res.render("index", {
    files: get_dir("./")
  });
});

app.get("/play/:name", function(req, res)  {
  res.render("play", {
    name: req.params.name
  });
});


app.get("/stream/:name", function(req, res)  {
  const path = req.params.name;
  const stat = fs.statSync(path)
  const fileSize = stat.size
  const range = req.headers.range

  if (range) {
    const parts = range.replace(/bytes=/, "").split("-")
    const start = parseInt(parts[0], 10)
    const end = parts[1]
      ? parseInt(parts[1], 10)
      : fileSize-1

    if(start >= fileSize) {
      res.status(416).send('Requested range not satisfiable\n'+start+' >= '+fileSize);
      return
    }
    
    const chunksize = (end-start)+1
    const file = fs.createReadStream(path, {start, end})
    const head = {
      'Content-Range': `bytes ${start}-${end}/${fileSize}`,
      'Accept-Ranges': 'bytes',
      'Content-Length': chunksize,
      'Content-Type': 'video/mp4',
    }

    res.writeHead(206, head)
    file.pipe(res)
  } else {
    const head = {
      'Content-Length': fileSize,
      'Content-Type': 'video/mp4',
    }
    res.writeHead(200, head)
    fs.createReadStream(path).pipe(res)
  }
});

app.listen(PORT, () => {
    try {
        let device = "";
        if (networkInterfaces["wlo1"]) {
          device = "wlo1";
        }
        else if (networkInterfaces["enp2s0"]) {
          device = "enp2s0";
        }
        console.log("go to -> " + "http:\\\\" + networkInterfaces[device][0]["address"] + ":" + PORT);
    }
    catch {
      console.error("Error could not find any network device. Please try changing network device above.");
      process.exit(1);
    }
  });

